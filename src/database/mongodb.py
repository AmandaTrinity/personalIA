import multiprocessing
import os
import ssl
import sys
from datetime import datetime
import certifi
from pymongo.errors import ConnectionFailure
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

from config.settings import settings

# Carregar configura√ß√µes da aplica√ß√£o
uri = settings.MONGO_URI
database_name = settings.DATABASE_NAME

# Verificar se estamos em ambiente de teste
is_testing = settings.is_testing
is_main_process = True

# Flags para evitar inicializa√ß√£o dupla
_mongodb_initialized = False
_connection_created = False

# Vari√°veis globais para conex√£o
client = None
db = None
usuarios_collection = None
treinos_collection = None
historico_collection = None

if not uri and not is_testing:
    raise ValueError(
        "‚ùå MONGO_URI n√£o configurada no arquivo .env! Por favor, configure a vari√°vel de ambiente."
    )

def create_mongodb_client():
    """Cria cliente MongoDB com diferentes estrat√©gias de conex√£o"""


    # Detectar contexto do processo para logs mais informativos
    process_info = f"(PID: {os.getpid()})"


    # Estrat√©gia 1: Conex√£o padr√£o com certificados do sistema
    try:
        print(f"üîÑ Tentando conex√£o padr√£o... {process_info}")
        client = MongoClient(
            uri,
            server_api=ServerApi("1"),
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=10000,
            tlsAllowInvalidCertificates=False,
        )
        # Teste de conex√£o
        client.admin.command("ping")
        print("‚úÖ Conex√£o padr√£o bem-sucedida!")
        return client, database_name
    except Exception as e:
        print(f"‚ùå Conex√£o padr√£o falhou: {type(e).__name__}")


    # Estrat√©gia 2: Usar certificados do certifi (padr√£o para muitos ambientes)
    try:
        print("üîÑ Tentando com certificados certifi...")
        client = MongoClient(
            uri,
            server_api=ServerApi("1"),
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=10000,
            tlsCAFile=certifi.where(),
            tlsAllowInvalidCertificates=False,
        )
        client.admin.command("ping")
        print("‚úÖ Conex√£o com certificados certifi bem-sucedida!")
        return client, database_name
    except Exception as e:
        print(f"‚ùå Conex√£o com certificados certifi falhou: {type(e).__name__}")

    # Estrat√©gia 3: Sem verifica√ß√£o SSL (apenas para desenvolvimento/teste)
    try:
        print("üîÑ Tentando conex√£o m√≠nima...")
        client = MongoClient(
            uri,
            server_api=ServerApi("1"),
            serverSelectionTimeoutMS=10000,
            connectTimeoutMS=10000,
            ssl=True,
            ssl_cert_reqs=ssl.CERT_NONE,
            tlsAllowInvalidCertificates=True,
        )
        client.admin.command("ping")
        print("‚úÖ Conex√£o m√≠nima bem-sucedida!")
        return client, database_name
    except Exception as e:
        print(f"‚ùå Conex√£o m√≠nima falhou: {type(e).__name__}")

    # Se todas falharam
    raise ConnectionError(
        "‚ùå N√£o foi poss√≠vel conectar ao MongoDB Atlas.\n"
        "üí° Poss√≠veis solu√ß√µes:\n"
        "1. Verifique se seu IP est√° na whitelist do MongoDB Atlas\n"
        "2. Tente usar uma rede diferente (ex: mobile hotspot)\n"
        "3. Verifique se as credenciais est√£o corretas\n"
        "4. Atualize o Python e depend√™ncias: pip install --upgrade pymongo certifi\n"
        "5. Configure o firewall/proxy da sua rede"
    )


def setup_mongodb():
    """Configura o MongoDB, cria collections e √≠ndices iniciais."""
    global _mongodb_initialized

    if _mongodb_initialized:
        print("‚úÖ MongoDB j√° foi inicializado anteriormente")
        return

    try:
        print("üîß Configurando MongoDB...")

        if client is None or db is None:
            print("‚ö†Ô∏è Cliente MongoDB n√£o dispon√≠vel, pulando configura√ß√£o")
            return

        # --- √çndices √∫teis ---
        usuarios_collection.create_index("email", unique=True)
        treinos_collection.create_index("usuario_id")
        historico_collection.create_index([("usuario_id", 1), ("treino_id", 1)])

        # --- Documento de inicializa√ß√£o opcional ---
        if "meta" not in db.list_collection_names():
            db.create_collection("meta")
            db["meta"].insert_one(
                {
                    "app": "PersonalAI",
                    "versao": "1.0.0",
                    "criado_em": datetime.utcnow(),
                    "descricao": "Banco inicial do PersonalAI - IA de treino personalizada",
                }
            )

        print("üì¶ Collections e √≠ndices criados com sucesso!")
        print(f"üóÉÔ∏è Collections existentes: {db.list_collection_names()}")

        _mongodb_initialized = True

    except ConnectionFailure as e:
        print("‚ùå Falha ao conectar ao MongoDB!")
        print(f"Detalhes: {e}")
    except Exception as e:
        print("‚ö†Ô∏è Erro durante a configura√ß√£o:")
        print(e)


# Criar conex√£o apenas se n√£o estivermos em ambiente de teste E se for processo apropriado
if not is_testing and uri and not _connection_created:
    try:
        _connection_created = True
        process_info = f"(PID: {os.getpid()}, Main: {is_main_process})"

        # S√≥ conectar se for o processo worker ou se n√£o estivermos em modo reload
        if not is_main_process or not any("reload" in str(arg) for arg in sys.argv):
            client, db_name = create_mongodb_client()
            db = client[db_name]
            print(f"üéØ Conectado ao banco: {db_name} {process_info}")

            # Criar as collections principais
            usuarios_collection = db["usuarios"]
            treinos_collection = db["treinos"]
            historico_collection = db["historico_acessos"]

            # Preparar collections e √≠ndices
            setup_mongodb()
        else:
            print(f"‚è∏Ô∏è Pulando conex√£o DB no processo reloader {process_info}")
            client = None
            db = None
            usuarios_collection = None
            treinos_collection = None
            historico_collection = None

    except Exception as e:
        print(f"üí• Erro fatal: {e}")
        # Para desenvolvimento, vamos criar um cliente mock
        print("‚ö†Ô∏è  Usando modo de desenvolvimento sem MongoDB")
        client = None
        db = None
        usuarios_collection = None
        treinos_collection = None
        historico_collection = None
elif is_testing or not uri:
    # Ambiente de teste ou sem URI - usar mocks
    if not _connection_created:
        print(f"üß™ Ambiente de teste detectado - usando mocks (PID: {os.getpid()})")
        _connection_created = True
else:
    # Conex√£o j√° foi criada anteriormente
    if _connection_created:
        print(f"‚úÖ Conex√£o MongoDB j√° estabelecida anteriormente (PID: {os.getpid()})")
